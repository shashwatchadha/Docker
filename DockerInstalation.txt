*************
UBUNTU
*************
sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install docker-ce
sudo usermod -aG docker $USER
sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose



******************
CHECK INSTALLATIONS
*******************
docker version

docker run hello-world

docker ps -a

docker system prune -a  # DO not use this command.


******************
BASIC COMMANDS
******************
docker run hello-world 			//This will first check for hello-world image in local repository. If it is not present it will download hello-world:latest from the remote repository and run hello-world

docker pull imageName			// This will check for the image in remote even if image is present in local. If new version is present it will download the extra files	

docker images                // This will show all the images in local repo.



***************
image name format
******************
[repository-name:port]/[owner]/image[:tag]
By default 
[repository-name:port] ---- hub.docker.com
[owner] --- library (docker owner)
tag -- latest 

**********************
Basic Docker continer
**********************
-d to run container in background
-i to attach standard input to the container
-t to attach standard output to the container
--name someName  to give some name to the container
--entrypoint=/bin/bash . this command will execute as soon as the contriner is created.
An image might have it's own entry point but this will overRide that

docker run -d helllo-world   ----> This will not print any output in the console.It will only show the containerID.

docker run ubuntu ---- if we run the command it will simply exit. This is because we did not run this in interactive mode.
docker run -it ubuntu --- Using it we can intercat with the container...
if we only use -t .. we won't be able to interact with the container. As the command that we will type it won't reach the container.

# docker run will always create a new container.

eg. -- docker run --entrypoint=date ubuntu  ---> this will just print the date


************************************
PORT MAPING
*******************************
docker run -p hostPort:containerPort image.

In simple words . If we want to access an application running inside a container from some other machine. We will map the port of the container to that of the host. So that outside user can easily access the application using the host port.


docker run -p 8080:8080 jenkins will be able to acess using hostIpand port 8080
docker run jenkins..// won't be able to access using host Ip and 8080 port.

docker run -p 80:80 nginx


*******************
Volume maping
***********************8
Whatever we do inside a docker container goes away with the container. We are pllaning to run our tests inside the container which will create some test outputs. So we map a director in host to the container. And the fiels can be shared. Files present in host are available for the container and vice versa.

docker run -v hostDirectory:containerDir image
